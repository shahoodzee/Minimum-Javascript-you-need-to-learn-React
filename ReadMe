//normal way of declaring fucntions
function DoSomething() {
}

//But we can now use arrow function usign cosnt keyword
const DoSomething =() => { 
//recommended because beneficial when using call back functions

}

//if you want to export a funciton inton another file we use eport keyword 
//with normal fucntions
export default function DoSomething(){

}

//with arrow functions
export const DoSomething =() => { 

}
//In react u define components which are just funcitons which takes in props which are arguments
//and return html and example given below

const MyComponent =() => {
    return <div></div>
}
{/* 

// Anonymous functions (like a button having onClick event)
<button onClick={}>
</button> 


//in normal javascript you declare the name of the function in the parameter of Onclick function.
<button onClick="function_1"> 
</button>

But in react you can just use it without decalring the name: 
<button 
    onClick={() => {
        console.log("hello world");
    }}
</button> you can execute command with out declaring any function name
*/}


//React allows u to write JS code in HTML which is called JSX 
// IT decrease the amount of code written for UI
 
//TERNARY  OPERATOR
let age = 10;
let name = age >10 ? "pedro" : "jack";
// this code means if age is less then 10 then the name is pedro else the name is jack
//In React we use ternary operators like 
const component = () => {

    return age > 19 ? <div>1st Div</div> : <div>2nd div</div>;

}

//Object in JS
const person = {
    name: "pedro",
    age: 20,
    ismarried: false,
};
const name = person.name
const age = person.age
const ismarried = person.ismarried

//In React
const {name,age,ismarried} = person;
 
//another notation of decalaring  obejcts in React
const name1 = "pedro"
const age1 = 12;
const ismarried1;
const person = { name1, age1, ismarried1: false,}; 

// Inorder to copy a object form another project
const person2 = {...person}

//copy the an object by changing the name from pedro to ali
const person3 = {...person,name:"ali"}

//Same is the case with arrays
const names = ["ali","shela","ajkil"]

//copy this array into another and add one more nanme
const names2 = [...names,"shahood"]

/* 
ARRAY MANIPUALTION

.map()
.filter()
.reduce()

*/

//.map() function

let names = ["ali","sheila","shabana"]
//you want to add these names in the heading tags of your website. So u use the map function
names.map((name)=>{
    return <h1> {name} </h1>
})
//it renders the names in the list into your HTML page

//.filter function
let names = ["pedro", "jessica","carol","pedro"]
//u want to filter out pedro(repeated names) form the list
names.filter((name)=>{
    return name!=="pedro"
})

/*
async 
await 
fetch
*/

//asynchronous programming in javascript
var name = "shahood"
console.log(name)       //shahood
var name = "ali"
console.log(name)      //ali

the name will be ali for the second time because its instantenous change but this is not the case for every application in web dev
it depends on many factors when u fetch data from API's
1 speed of interrnet
2 how far u r away from server

example : supppose iam fetching data from URL about some movies 

var Listofmovies = fecth("url.com/movies")
console.log(Listofmovies)

/*The console.log will not work because that fetch will take some time to retrieve all the data from the URL. But the var Listofmovies doesnt wait for data to arrive.
As a result we donot get the desired output from the console.log(). 
Many languages deal it with many ways. JS does it by using PROMISES.*/

//A promise is  just a class that you can invoke. 
//resolve and reject are two parameters
//when some condition is true we want to resolve that event
//when an error occurs we call reject function when u want a promise to fail

const event = new Promise((resolve, reject)=>{
    var name = "shahood";
    if (name == "shahood") {
        resolve();
    } else {
        reject("name was not shhaood , the name was " + name);
    }
});

event.then(()=> {
    console.log(name);

 }).catch((err)=> {
    console.log(err);

 });
 
//bascially this code states if the name is shahood our condition is true and we wanna resolve that event \.... the event was sucessfull 
// in reading the data. else we wanna see the error 
//so what we can understand about promises from this example is that 
// if the data has been receieved then we wanna do something
// else if we have s=faced some errors we wanna see those errors 
// there is also a finally case which will be called wether an error has been caused or any condition has met

event
    .then(()=>{
        console.log(name);
    })
    .catch((err)=>{
        console.log(err);
    })
    .finally(()=>{
        console.log("promise finished")
    });

//Async keyword
//We use async keyword to get rid of try and catch block
// the trick is u add the keyword wait 
async function asyncCall() {
    const result = await fetch(URL.com);
    console.log(result);
}
// So the variables who have been given value using await keyword only get asynchronous and wait for information to arrive and then console.log it on screen.
